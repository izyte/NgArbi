- create new project (ng new ngarbi)
- install angular material (ng add @angular/material)
- install bootstrap:

   npm i bootstrap --save
   npm i --save @ng-bootstrap/ng-bootstrap

on angular.json
            "styles": [
              "./node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.scss"
            ],


on app.module.ts:
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';

imports [..,NgbModule, ..]

NgbModule 

get resources from https://ng-bootstrap.github.io/


- install font awesome (npm i @fortawesome/fontawesome-free --save)
- import font awesome css into styles.scss (@import "../node_modules/@fortawesome/fontawesome-free/css/all.css";)



Client side Api implementation:
- copy entire api folder to new project

Server side Api implementation
- create new Web API project
- test by running (Ctrl+F5), and call http://localhost:<port>/api/<controllername> (e.g. values)
  <controllername> is taken from the name of the controller class but without the Controller word.
  e.g. ValuesController => called as http://localhost:<port>/api/Values

- copy app.settings.json file to the root of the new API project

- NOTE: bypass authorization by commenting [Authorize] line

- Add reference to ... in Global.asax
	using DataAccess;
	using System.Configuration;

- Add the following lines inside the Application_Start of Global.asax

            /*************************** custom calls ******************************************/

            // Initialize data access connection and other properties
            DAL.connectionString = ConfigurationManager.ConnectionStrings["cnsAppAPI"].ConnectionString;
            DALGlobals.APP_SETTINGS = DataAccess.AppGlobals2.AppSetings;
            DALGlobals.GeneralRetObj = new ReturnObjectExternal();
            AppDataset.configPath = "";
            AppDataset.clientDevPath = "";

            DAL.LogMessage("Application Started ..");

            // Initialize dataset
            AppDataset.Initialize();

- Set Connection String name "cnsAppAPI" to point to proper connection string

- Create a new controller named AppController and copy the contents of the template project (rename back the namespace to the original namespace assigned to the project.)
- Modify // Web API routes in the WebApiConfig.cs

...

            config.Routes.MapHttpRoute(
                name: "DefaultApi",
                routeTemplate: "api/{controller}/{table}/{key}/{keyField}",
                defaults: new {
                        table = RouteParameter.Optional
                        , key = RouteParameter.Optional
                        , keyField = RouteParameter.Optional
                }
            );
...

============================================================
GitHub:
- create new repository
- copy bk.bat from existing project
- modify multiple project backup batch file to execute bk.bat for each project and save it into a new batch file
- run first commit


Breadboarding:
https://breadboarding-poc.netlify.com

Form Input Layout

C:LIH

Label
Input
Help

CR:LIH
->Label
Input
->Help

R:
Label  Input
Help


Radio Button snag....
when using reactive form with radio button, bind value as [value]="src.value" instead of using checked to initialize selected option properly


=============================
Continuing with client-side
api


=============================
TypeScrip Deconstructing

var rect = { x: 0, y: 10, width: 15, height: 20 };

// Destructuring assignment
var {x, y, width, height} = rect;

// IVY option with V8
ng new ivy-app --enable-ivy
ng build --prod

inside compiler settings (tsconfig.json)
"angularCompilerOptions:{
	...
	"enableIvy": true,
	...
}


=-===============
angular material vs bootstrap
"The Best Parts of Bootstrap 4 You are Missing in Angular Material" https://www.amadousall.com

================================
Object Destructuring
Destructuring is useful because it allows you to do in a single line, what would otherwise require multiple lines. Consider the following case:
var rect = { x: 0, y: 10, width: 15, height: 20 };

// Destructuring assignment
var {x, y, width, height} = rect;
console.log(x, y, width, height); // 0,10,15,20

rect.x = 10;
({x, y, width, height} = rect); // assign to existing variables using outer parentheses
console.log(x, y, width, height); // 10,10,15,20
